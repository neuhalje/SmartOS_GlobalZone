#!/bin/bash
# Taken from: http://zpool.org/2013/09/06/zfs-snapshots-and-remote-replication
# 2013/05/28 - pds - Initial script creation
#

# PATH=/usr/xpg4/bin:/usr/bin:/usr/sbin:/smartdc/bin:/opt/local/bin:/opt/local/sbin

# Local ZFS filesystems that will have snapshot
# logic applied
DATASETS="zones"
DEST_DATASET="zbackup/$(hostname)"

# Destination host for snapshot replication
DHOST=172.20.0.94

# Output logfile
LOGFILE=/var/log/snapxfer.log

# Tools that help implement snapshot logic and transfer
ZSNAP=/opt/custom/zfSnap/zfSnap
ZXFER=/opt/custom/zxfer/zxfer

LOCKFILE_PREFIX=/var/run/snapxfer.lock

######################################################################
# Main logic #
######################################################################

interval=$1

function usage()
{
echo ""
echo "Usage: $0 (async|hourly|daily|weekly|purge)"
echo ""
echo "* Asynchronous DR snapshots are kept for 1 hour"
echo "* Hourly snapshots are kept for 1 day"
echo "* Daily snapshots are kept for one week"
echo "* Weekly snapshots are kept for one month"
echo ""
}

function snap()
{
  filesystem=$1
  keep=$2

  $ZSNAP -v  -s -S -a $keep -r $filesystem >> $LOGFILE
}

function send_all()
{
  aquire_lock "send"
  local lock_error=$?

  if [[ $lock_error != 0 ]]
  then
     echo "Skipping sending snapshots; other process is running"
     return $lock_error
  fi

  # send snapshots to failover host
  for dset in $DATASETS
  do
    if [ "$DHOST" == "localhost" -o "$DHOST" == "" ]
    then
      $ZXFER -dFv -R $dset $DEST_DATASET >> $LOGFILE
    else
      $ZXFER -dFv -T root@$DHOST -R $dset $DEST_DATASET >> $LOGFILE
    fi
  done

  release_lock "snap"
}

function purge_old_snaps()
{

  aquire_lock "snap"
  local lock_error=$?
  if [[ $lock_error != 0 ]]
  then
    echo "Skipping cleaning up snapshots; other snap process is running"
    return $lock_error
  fi

  aquire_lock "send"
  local lock_error=$?
  if [[ $lock_error != 0 ]]
  then
    echo "Skipping cleaning up snapshots; other send process is running"
    return $lock_error
  fi
        # purge snapshots according to TTL
        $ZSNAP -v -s -S -d

  release_lock "send"
  release_lock "snap"
}

function snap_all()
{
  local keep=$1

  aquire_lock "snap"
  local lock_error=$?
  if [[ $lock_error != 0 ]]
  then
    echo "Skipping taking snapshots; other process is running"
    return $lock_error
  fi

  for dset in $DATASETS
  do
     snap $dset $keep
  done

  release_lock "snap"
}

function clean_up()
{
        # Perform program exit housekeeping
        release_lock "snap"
        release_lock "send"
        exit
}

function release_lock()
{
  local locktype=$1
  local lockfile=${LOCKFILE_PREFIX}.$locktype
  rm $lockfile 2>/dev/null
}

# returns 0 on success
function aquire_lock()
{
        # Lockfile handling.
        locktype=$1
        lockfile=${LOCKFILE_PREFIX}.$locktype

        if [ -f $lockfile ]; then
           echo \"$lockfile\" exists, exiting.
           echo Content:
           cat $lockfile
           return 2
        else
           echo PID $$ > $lockfile
           if [ $? -ne 0 ]
           then
              echo "Could not create lockfile '$lockfile', aborting"
              return 99
           fi
           date >> $lockfile
           echo $0 $@ >> $lockfile
        fi
        return 0
}


trap clean_up SIGHUP SIGINT SIGTERM


if [ ! -f $LOGFILE ]; then
  touch $LOGFILE
fi

case ${interval} in

'async')

        # take snapshots for asynchronous DR purposes
        snap_all "1h"

        send_all

        echo "" >> $LOGFILE
;;

'hourly')
        # take snapshots, keep for one day
        snap_all "1d"
        echo "" >> $LOGFILE
;;

'daily')
        # take snapshots, keep for one week
        snap_all "1w"
        echo "" >> $LOGFILE

        # purge snapshots according to TTL
        $ZSNAP -s -S -d >> $LOGFILE
        echo "" >> $LOGFILE
;;

'weekly')
        # take snapshots, keep for one month
        snap_all "1m"
        echo "" >> $LOGFILE
;;

'monthly')
# take snapshots, keep for one year
        snap_all "1y"
        echo "" >> $LOGFILE
;;

'purge')
        purge_old_snaps
        echo "" >> $LOGFILE
;;

*)
usage
;;

esac

clean_up
