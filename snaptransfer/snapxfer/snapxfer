#!/bin/bash
# Taken from: http://zpool.org/2013/09/06/zfs-snapshots-and-remote-replication
# 2013/05/28 - pds - Initial script creation
#

# PATH=/usr/xpg4/bin:/usr/bin:/usr/sbin:/smartdc/bin:/opt/local/bin:/opt/local/sbin

# Local ZFS filesystems that will have snapshot
# logic applied
DATASETS="zones"
DEST_DATASET="zbackup/$(hostname)"

# Destination host for snapshot replication
DHOST=172.20.0.94

# Output logfile
LOGFILE=/var/log/snapxfer.log

# Tools that help implement snapshot logic and transfer
ZSNAP=/opt/custom/zfSnap/zfSnap
ZXFER=/opt/custom/zxfer/zxfer

LOCKFILE=/var/run/snapxfer.lock

######################################################################
# Main logic #
######################################################################

interval=$1

function usage()
{
echo ""
echo "Usage: $0 (async|hourly|daily|weekly|purge)"
echo ""
echo "* Asynchronous DR snapshots are kept for 1 hour"
echo "* Hourly snapshots are kept for 1 day"
echo "* Daily snapshots are kept for one week"
echo "* Weekly snapshots are kept for one month"
echo ""
}

function snap()
{
  filesystem=$1
  keep=$2

  $ZSNAP -v  -s -S -a $keep -r $filesystem >> $LOGFILE
}

function snap_all()
{
  keep=$1

  for dset in $DATASETS
  do
     snap $dset $keep
  done
}

function clean_up {

        # Perform program exit housekeeping
        rm $LOCKFILE
        exit
}

trap clean_up SIGHUP SIGINT SIGTERM

if [ -f $LOCKFILE ]; then
   echo \"$LOCKFILE\" exists, exiting.
   echo Content:
   cat $LOCKFILE
   exit 2
else
   echo PID $$ > $LOCKFILE
   if [ $? -ne 0 ]
   then
      echo "Could not create lockfile '$LOCKFILE', aborting"
      exit 99
   fi
   date >> $LOCKFILE
   echo $0 $@ >> $LOCKFILE
fi

if [ ! -f $LOGFILE ]; then
  touch $LOGFILE
fi

case ${interval} in

'async')

        # take snapshots for asynchronous DR purposes
        snap_all "1h"

        # send snapshots to failover host
        for dset in $DATASETS
        do
        $ZXFER -dFv -T root@$DHOST -R $dset $DEST_DATASET >> $LOGFILE
        done
        echo "" >> $LOGFILE
;;

'hourly')
        # take snapshots, keep for one day
        snap_all "1d"
        echo "" >> $LOGFILE
;;

'daily')
        # take snapshots, keep for one week
        snap_all "1w"
        echo "" >> $LOGFILE

        # purge snapshots according to TTL
        $ZSNAP -s -S -d >> $LOGFILE
        echo "" >> $LOGFILE
;;

'weekly')
        # take snapshots, keep for one month
        snap_all "1m"
        echo "" >> $LOGFILE
;;

'monthly')
# take snapshots, keep for one year
        snap_all "1y"
        echo "" >> $LOGFILE
;;

'purge')
        # purge snapshots according to TTL
        $ZSNAP -v -s -S -d
;;

*)
usage
;;

esac

clean_up
